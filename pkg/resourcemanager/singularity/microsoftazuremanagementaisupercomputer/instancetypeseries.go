package microsoftazuremanagementaisupercomputer

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// InstanceTypeSeriesClient is the aISupercomputer Management Client
type InstanceTypeSeriesClient struct {
    BaseClient
}
// NewInstanceTypeSeriesClient creates an instance of the InstanceTypeSeriesClient client.
func NewInstanceTypeSeriesClient(subscriptionID string) InstanceTypeSeriesClient {
    return NewInstanceTypeSeriesClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewInstanceTypeSeriesClientWithBaseURI creates an instance of the InstanceTypeSeriesClient client using a custom
// endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure
// stack).
    func NewInstanceTypeSeriesClientWithBaseURI(baseURI string, subscriptionID string) InstanceTypeSeriesClient {
        return InstanceTypeSeriesClient{ NewWithBaseURI(baseURI, subscriptionID)}
    }

// List list all the available instance type series for the location.
    // Parameters:
        // location - the name of the Azure location.
func (client InstanceTypeSeriesClient) List(ctx context.Context, location string) (result AvailableInstanceTypeSeriesDescriptionListPage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/InstanceTypeSeriesClient.List")
        defer func() {
            sc := -1
        if result.aitsdl.Response.Response != nil {
        sc = result.aitsdl.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listNextResults
    req, err := client.ListPreparer(ctx, location)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "List", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListSender(req)
        if err != nil {
        result.aitsdl.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "List", resp, "Failure sending request")
        return
        }

        result.aitsdl, err = client.ListResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "List", resp, "Failure responding to request")
        }
            if result.aitsdl.hasNextLink() && result.aitsdl.IsEmpty() {
            err = result.NextWithContext(ctx)
            }

    return
}

    // ListPreparer prepares the List request.
    func (client InstanceTypeSeriesClient) ListPreparer(ctx context.Context, location string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "location": location,
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.AISupercomputer/locations/{location}/instanceTypeSeries",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListSender sends the List request. The method will close the
    // http.Response Body if it receives an error.
    func (client InstanceTypeSeriesClient) ListSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, azure.DoRetryWithRegistration(client.Client))
            }

    // ListResponder handles the response to the List request. The method always
    // closes the http.Response Body.
    func (client InstanceTypeSeriesClient) ListResponder(resp *http.Response) (result AvailableInstanceTypeSeriesDescriptionList, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listNextResults retrieves the next set of results, if any.
            func (client InstanceTypeSeriesClient) listNextResults(ctx context.Context, lastResults AvailableInstanceTypeSeriesDescriptionList) (result AvailableInstanceTypeSeriesDescriptionList, err error) {
            req, err := lastResults.availableInstanceTypeSeriesDescriptionListPreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "listNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "listNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "listNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListComplete enumerates all values, automatically crossing page boundaries as required.
            func (client InstanceTypeSeriesClient) ListComplete(ctx context.Context, location string) (result AvailableInstanceTypeSeriesDescriptionListIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/InstanceTypeSeriesClient.List")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.List(ctx, location)
                            return
            }

// ListInstanceType list all the available instance types for the instance type series.
    // Parameters:
        // location - the name of the Azure location.
        // instanceTypeSeriesID - the id of the Singularity instance type series.
func (client InstanceTypeSeriesClient) ListInstanceType(ctx context.Context, location string, instanceTypeSeriesID string) (result AvailableInstanceTypeDescriptionListPage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/InstanceTypeSeriesClient.ListInstanceType")
        defer func() {
            sc := -1
        if result.aitdl.Response.Response != nil {
        sc = result.aitdl.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listInstanceTypeNextResults
    req, err := client.ListInstanceTypePreparer(ctx, location, instanceTypeSeriesID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "ListInstanceType", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListInstanceTypeSender(req)
        if err != nil {
        result.aitdl.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "ListInstanceType", resp, "Failure sending request")
        return
        }

        result.aitdl, err = client.ListInstanceTypeResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "ListInstanceType", resp, "Failure responding to request")
        }
            if result.aitdl.hasNextLink() && result.aitdl.IsEmpty() {
            err = result.NextWithContext(ctx)
            }

    return
}

    // ListInstanceTypePreparer prepares the ListInstanceType request.
    func (client InstanceTypeSeriesClient) ListInstanceTypePreparer(ctx context.Context, location string, instanceTypeSeriesID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "instanceTypeSeriesId": instanceTypeSeriesID,
        "location": location,
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.AISupercomputer/locations/{location}/instanceTypeSeries/{instanceTypeSeriesId}/instanceTypes",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListInstanceTypeSender sends the ListInstanceType request. The method will close the
    // http.Response Body if it receives an error.
    func (client InstanceTypeSeriesClient) ListInstanceTypeSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, azure.DoRetryWithRegistration(client.Client))
            }

    // ListInstanceTypeResponder handles the response to the ListInstanceType request. The method always
    // closes the http.Response Body.
    func (client InstanceTypeSeriesClient) ListInstanceTypeResponder(resp *http.Response) (result AvailableInstanceTypeDescriptionList, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listInstanceTypeNextResults retrieves the next set of results, if any.
            func (client InstanceTypeSeriesClient) listInstanceTypeNextResults(ctx context.Context, lastResults AvailableInstanceTypeDescriptionList) (result AvailableInstanceTypeDescriptionList, err error) {
            req, err := lastResults.availableInstanceTypeDescriptionListPreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "listInstanceTypeNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListInstanceTypeSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "listInstanceTypeNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListInstanceTypeResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.InstanceTypeSeriesClient", "listInstanceTypeNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListInstanceTypeComplete enumerates all values, automatically crossing page boundaries as required.
            func (client InstanceTypeSeriesClient) ListInstanceTypeComplete(ctx context.Context, location string, instanceTypeSeriesID string) (result AvailableInstanceTypeDescriptionListIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/InstanceTypeSeriesClient.ListInstanceType")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.ListInstanceType(ctx, location, instanceTypeSeriesID)
                            return
            }

