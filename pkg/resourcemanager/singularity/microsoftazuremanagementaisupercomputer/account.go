package microsoftazuremanagementaisupercomputer

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
    "github.com/Azure/go-autorest/autorest/validation"
)

// AccountClient is the aISupercomputer Management Client
type AccountClient struct {
    BaseClient
}
// NewAccountClient creates an instance of the AccountClient client.
func NewAccountClient(subscriptionID string) AccountClient {
    return NewAccountClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewAccountClientWithBaseURI creates an instance of the AccountClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewAccountClientWithBaseURI(baseURI string, subscriptionID string) AccountClient {
        return AccountClient{ NewWithBaseURI(baseURI, subscriptionID)}
    }

// CreateOrUpdate creates an account resource with the specified name, description and properties. If an account
// resource with the same name exists, then it is updated with the specified description and properties.
    // Parameters:
        // resourceGroupName - the name of the resource group within the user's subscription.
        // accountName - the name of the Singularity account.
        // body - singularity account information.
func (client AccountClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, accountName string, body AccountResourceDescription) (result AccountCreateOrUpdateFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AccountClient.CreateOrUpdate")
        defer func() {
            sc := -1
        if result.Response() != nil {
        sc = result.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: body,
         Constraints: []validation.Constraint{	{Target: "body.AccountResourceDescriptionProperties", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError("microsoftazuremanagementaisupercomputer.AccountClient", "CreateOrUpdate", err.Error())
        }

        req, err := client.CreateOrUpdatePreparer(ctx, resourceGroupName, accountName, body)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "CreateOrUpdate", nil , "Failure preparing request")
    return
    }

        result, err = client.CreateOrUpdateSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "CreateOrUpdate", result.Response(), "Failure sending request")
        return
        }

    return
}

    // CreateOrUpdatePreparer prepares the CreateOrUpdate request.
    func (client AccountClient) CreateOrUpdatePreparer(ctx context.Context, resourceGroupName string, accountName string, body AccountResourceDescription) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "accountName": accountName,
        "resourceGroupName": resourceGroupName,
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPut(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}",pathParameters),
autorest.WithJSON(body),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
    // http.Response Body if it receives an error.
    func (client AccountClient) CreateOrUpdateSender(req *http.Request) (future AccountCreateOrUpdateFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
            if err != nil {
            return
            }
            future.Future, err = azure.NewFutureFromResponse(resp)
            return
            }

    // CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
    // closes the http.Response Body.
    func (client AccountClient) CreateOrUpdateResponder(resp *http.Response) (result AccountResourceDescription, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Delete deletes the account resource identified by the name.
    // Parameters:
        // resourceGroupName - the name of the resource group within the user's subscription.
        // accountName - the name of the Singularity account.
func (client AccountClient) Delete(ctx context.Context, resourceGroupName string, accountName string) (result AccountDeleteFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AccountClient.Delete")
        defer func() {
            sc := -1
        if result.Response() != nil {
        sc = result.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreparer(ctx, resourceGroupName, accountName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "Delete", nil , "Failure preparing request")
    return
    }

        result, err = client.DeleteSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "Delete", result.Response(), "Failure sending request")
        return
        }

    return
}

    // DeletePreparer prepares the Delete request.
    func (client AccountClient) DeletePreparer(ctx context.Context, resourceGroupName string, accountName string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "accountName": accountName,
        "resourceGroupName": resourceGroupName,
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteSender sends the Delete request. The method will close the
    // http.Response Body if it receives an error.
    func (client AccountClient) DeleteSender(req *http.Request) (future AccountDeleteFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
            if err != nil {
            return
            }
            future.Future, err = azure.NewFutureFromResponse(resp)
            return
            }

    // DeleteResponder handles the response to the Delete request. The method always
    // closes the http.Response Body.
    func (client AccountClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// Get gets the information about the account resource with the given name. The information include the description and
// other properties of the account.
    // Parameters:
        // resourceGroupName - the name of the resource group within the user's subscription.
        // accountName - the name of the Singularity account.
func (client AccountClient) Get(ctx context.Context, resourceGroupName string, accountName string) (result AccountResourceDescription, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AccountClient.Get")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetPreparer(ctx, resourceGroupName, accountName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "Get", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "Get", resp, "Failure sending request")
        return
        }

        result, err = client.GetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "Get", resp, "Failure responding to request")
        }

    return
}

    // GetPreparer prepares the Get request.
    func (client AccountClient) GetPreparer(ctx context.Context, resourceGroupName string, accountName string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "accountName": accountName,
        "resourceGroupName": resourceGroupName,
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetSender sends the Get request. The method will close the
    // http.Response Body if it receives an error.
    func (client AccountClient) GetSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, azure.DoRetryWithRegistration(client.Client))
            }

    // GetResponder handles the response to the Get request. The method always
    // closes the http.Response Body.
    func (client AccountClient) GetResponder(resp *http.Response) (result AccountResourceDescription, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// ListByResourceGroup gets the information about all account resources in a given resource group. The information
// include the description and other properties of the Account.
    // Parameters:
        // resourceGroupName - the name of the resource group within the user's subscription.
func (client AccountClient) ListByResourceGroup(ctx context.Context, resourceGroupName string) (result AccountResourceDescriptionListPage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AccountClient.ListByResourceGroup")
        defer func() {
            sc := -1
        if result.ardl.Response.Response != nil {
        sc = result.ardl.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listByResourceGroupNextResults
    req, err := client.ListByResourceGroupPreparer(ctx, resourceGroupName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "ListByResourceGroup", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListByResourceGroupSender(req)
        if err != nil {
        result.ardl.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "ListByResourceGroup", resp, "Failure sending request")
        return
        }

        result.ardl, err = client.ListByResourceGroupResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "ListByResourceGroup", resp, "Failure responding to request")
        }
            if result.ardl.hasNextLink() && result.ardl.IsEmpty() {
            err = result.NextWithContext(ctx)
            }

    return
}

    // ListByResourceGroupPreparer prepares the ListByResourceGroup request.
    func (client AccountClient) ListByResourceGroupPreparer(ctx context.Context, resourceGroupName string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "resourceGroupName": resourceGroupName,
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListByResourceGroupSender sends the ListByResourceGroup request. The method will close the
    // http.Response Body if it receives an error.
    func (client AccountClient) ListByResourceGroupSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, azure.DoRetryWithRegistration(client.Client))
            }

    // ListByResourceGroupResponder handles the response to the ListByResourceGroup request. The method always
    // closes the http.Response Body.
    func (client AccountClient) ListByResourceGroupResponder(resp *http.Response) (result AccountResourceDescriptionList, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listByResourceGroupNextResults retrieves the next set of results, if any.
            func (client AccountClient) listByResourceGroupNextResults(ctx context.Context, lastResults AccountResourceDescriptionList) (result AccountResourceDescriptionList, err error) {
            req, err := lastResults.accountResourceDescriptionListPreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "listByResourceGroupNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListByResourceGroupSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "listByResourceGroupNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListByResourceGroupResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "listByResourceGroupNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListByResourceGroupComplete enumerates all values, automatically crossing page boundaries as required.
            func (client AccountClient) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (result AccountResourceDescriptionListIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/AccountClient.ListByResourceGroup")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.ListByResourceGroup(ctx, resourceGroupName)
                            return
            }

// ListBySubscription gets the information about all account resources in a given subscription. The information include
// the description and other properties of the account.
func (client AccountClient) ListBySubscription(ctx context.Context) (result AccountResourceDescriptionListPage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AccountClient.ListBySubscription")
        defer func() {
            sc := -1
        if result.ardl.Response.Response != nil {
        sc = result.ardl.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listBySubscriptionNextResults
    req, err := client.ListBySubscriptionPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "ListBySubscription", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListBySubscriptionSender(req)
        if err != nil {
        result.ardl.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "ListBySubscription", resp, "Failure sending request")
        return
        }

        result.ardl, err = client.ListBySubscriptionResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "ListBySubscription", resp, "Failure responding to request")
        }
            if result.ardl.hasNextLink() && result.ardl.IsEmpty() {
            err = result.NextWithContext(ctx)
            }

    return
}

    // ListBySubscriptionPreparer prepares the ListBySubscription request.
    func (client AccountClient) ListBySubscriptionPreparer(ctx context.Context) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.AISupercomputer/accounts",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListBySubscriptionSender sends the ListBySubscription request. The method will close the
    // http.Response Body if it receives an error.
    func (client AccountClient) ListBySubscriptionSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, azure.DoRetryWithRegistration(client.Client))
            }

    // ListBySubscriptionResponder handles the response to the ListBySubscription request. The method always
    // closes the http.Response Body.
    func (client AccountClient) ListBySubscriptionResponder(resp *http.Response) (result AccountResourceDescriptionList, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listBySubscriptionNextResults retrieves the next set of results, if any.
            func (client AccountClient) listBySubscriptionNextResults(ctx context.Context, lastResults AccountResourceDescriptionList) (result AccountResourceDescriptionList, err error) {
            req, err := lastResults.accountResourceDescriptionListPreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "listBySubscriptionNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListBySubscriptionSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "listBySubscriptionNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListBySubscriptionResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "listBySubscriptionNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListBySubscriptionComplete enumerates all values, automatically crossing page boundaries as required.
            func (client AccountClient) ListBySubscriptionComplete(ctx context.Context) (result AccountResourceDescriptionListIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/AccountClient.ListBySubscription")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.ListBySubscription(ctx)
                            return
            }

// Update if an account resource with the same name exists, then it is updated with the specified description and
// properties.
    // Parameters:
        // resourceGroupName - the name of the resource group within the user's subscription.
        // accountName - the name of the Singularity account.
        // body - singularity account information.
func (client AccountClient) Update(ctx context.Context, resourceGroupName string, accountName string, body AccountResourcePatchDescription) (result AccountUpdateFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AccountClient.Update")
        defer func() {
            sc := -1
        if result.Response() != nil {
        sc = result.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.UpdatePreparer(ctx, resourceGroupName, accountName, body)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "Update", nil , "Failure preparing request")
    return
    }

        result, err = client.UpdateSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountClient", "Update", result.Response(), "Failure sending request")
        return
        }

    return
}

    // UpdatePreparer prepares the Update request.
    func (client AccountClient) UpdatePreparer(ctx context.Context, resourceGroupName string, accountName string, body AccountResourcePatchDescription) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "accountName": accountName,
        "resourceGroupName": resourceGroupName,
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPatch(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}",pathParameters),
autorest.WithJSON(body),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateSender sends the Update request. The method will close the
    // http.Response Body if it receives an error.
    func (client AccountClient) UpdateSender(req *http.Request) (future AccountUpdateFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
            if err != nil {
            return
            }
            future.Future, err = azure.NewFutureFromResponse(resp)
            return
            }

    // UpdateResponder handles the response to the Update request. The method always
    // closes the http.Response Body.
    func (client AccountClient) UpdateResponder(resp *http.Response) (result AccountResourceDescription, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

