package microsoftazuremanagementaisupercomputer

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
    "github.com/Azure/go-autorest/autorest/validation"
)

// AccountQuotaPolicyClient is the aISupercomputer Management Client
type AccountQuotaPolicyClient struct {
    BaseClient
}
// NewAccountQuotaPolicyClient creates an instance of the AccountQuotaPolicyClient client.
func NewAccountQuotaPolicyClient(subscriptionID string) AccountQuotaPolicyClient {
    return NewAccountQuotaPolicyClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewAccountQuotaPolicyClientWithBaseURI creates an instance of the AccountQuotaPolicyClient client using a custom
// endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure
// stack).
    func NewAccountQuotaPolicyClientWithBaseURI(baseURI string, subscriptionID string) AccountQuotaPolicyClient {
        return AccountQuotaPolicyClient{ NewWithBaseURI(baseURI, subscriptionID)}
    }

// CreateOrUpdate creates an account resource with the specified name, description and properties. If an account
// resource with the same name exists, then it is updated with the specified description and properties. Currently the
// only supported policy name is 'AccountQuotaPolicy'
    // Parameters:
        // resourceGroupName - the name of the resource group within the user's subscription.
        // accountName - the name of the Singularity account.
        // policyName - the name of the Singularity account quota policy. Should only be Default.
        // body - singularity AccountQuotaPolicy information.
func (client AccountQuotaPolicyClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, accountName string, policyName string, body AccountQuotaPolicyResourceDescription) (result AccountQuotaPolicyCreateOrUpdateFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AccountQuotaPolicyClient.CreateOrUpdate")
        defer func() {
            sc := -1
        if result.Response() != nil {
        sc = result.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: body,
         Constraints: []validation.Constraint{	{Target: "body.AccountQuotaPolicyResourceDescriptionProperties", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError("microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "CreateOrUpdate", err.Error())
        }

        req, err := client.CreateOrUpdatePreparer(ctx, resourceGroupName, accountName, policyName, body)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "CreateOrUpdate", nil , "Failure preparing request")
    return
    }

        result, err = client.CreateOrUpdateSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "CreateOrUpdate", result.Response(), "Failure sending request")
        return
        }

    return
}

    // CreateOrUpdatePreparer prepares the CreateOrUpdate request.
    func (client AccountQuotaPolicyClient) CreateOrUpdatePreparer(ctx context.Context, resourceGroupName string, accountName string, policyName string, body AccountQuotaPolicyResourceDescription) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "accountName": accountName,
        "policyName": policyName,
        "resourceGroupName": resourceGroupName,
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPut(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/accountQuotaPolicies/{policyName}",pathParameters),
autorest.WithJSON(body),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
    // http.Response Body if it receives an error.
    func (client AccountQuotaPolicyClient) CreateOrUpdateSender(req *http.Request) (future AccountQuotaPolicyCreateOrUpdateFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
            if err != nil {
            return
            }
            future.Future, err = azure.NewFutureFromResponse(resp)
            return
            }

    // CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
    // closes the http.Response Body.
    func (client AccountQuotaPolicyClient) CreateOrUpdateResponder(resp *http.Response) (result AccountQuotaPolicyResourceDescription, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Get gets the information about the account quota policy resource with the given name. The information include the
// description and other properties of the account quota policy.
    // Parameters:
        // resourceGroupName - the name of the resource group within the user's subscription.
        // accountName - the name of the Singularity account.
        // policyName - the name of the Singularity account quota policy. Should only be Default.
func (client AccountQuotaPolicyClient) Get(ctx context.Context, resourceGroupName string, accountName string, policyName string) (result AccountQuotaPolicyResourceDescription, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AccountQuotaPolicyClient.Get")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetPreparer(ctx, resourceGroupName, accountName, policyName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "Get", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "Get", resp, "Failure sending request")
        return
        }

        result, err = client.GetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "Get", resp, "Failure responding to request")
        }

    return
}

    // GetPreparer prepares the Get request.
    func (client AccountQuotaPolicyClient) GetPreparer(ctx context.Context, resourceGroupName string, accountName string, policyName string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "accountName": accountName,
        "policyName": policyName,
        "resourceGroupName": resourceGroupName,
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/accountQuotaPolicies/{policyName}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetSender sends the Get request. The method will close the
    // http.Response Body if it receives an error.
    func (client AccountQuotaPolicyClient) GetSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, azure.DoRetryWithRegistration(client.Client))
            }

    // GetResponder handles the response to the Get request. The method always
    // closes the http.Response Body.
    func (client AccountQuotaPolicyClient) GetResponder(resp *http.Response) (result AccountQuotaPolicyResourceDescription, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// ListByAccount gets the information about all account quota policy resources in a given account. The information
// include the description and other properties of the account quota policy.
    // Parameters:
        // resourceGroupName - the name of the resource group within the user's subscription.
        // accountName - the name of the Singularity account.
func (client AccountQuotaPolicyClient) ListByAccount(ctx context.Context, resourceGroupName string, accountName string) (result AccountQuotaPolicyResourceDescriptionListPage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AccountQuotaPolicyClient.ListByAccount")
        defer func() {
            sc := -1
        if result.aqprdl.Response.Response != nil {
        sc = result.aqprdl.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listByAccountNextResults
    req, err := client.ListByAccountPreparer(ctx, resourceGroupName, accountName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "ListByAccount", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListByAccountSender(req)
        if err != nil {
        result.aqprdl.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "ListByAccount", resp, "Failure sending request")
        return
        }

        result.aqprdl, err = client.ListByAccountResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "ListByAccount", resp, "Failure responding to request")
        }
            if result.aqprdl.hasNextLink() && result.aqprdl.IsEmpty() {
            err = result.NextWithContext(ctx)
            }

    return
}

    // ListByAccountPreparer prepares the ListByAccount request.
    func (client AccountQuotaPolicyClient) ListByAccountPreparer(ctx context.Context, resourceGroupName string, accountName string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "accountName": accountName,
        "resourceGroupName": resourceGroupName,
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/accountQuotaPolicies",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListByAccountSender sends the ListByAccount request. The method will close the
    // http.Response Body if it receives an error.
    func (client AccountQuotaPolicyClient) ListByAccountSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, azure.DoRetryWithRegistration(client.Client))
            }

    // ListByAccountResponder handles the response to the ListByAccount request. The method always
    // closes the http.Response Body.
    func (client AccountQuotaPolicyClient) ListByAccountResponder(resp *http.Response) (result AccountQuotaPolicyResourceDescriptionList, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listByAccountNextResults retrieves the next set of results, if any.
            func (client AccountQuotaPolicyClient) listByAccountNextResults(ctx context.Context, lastResults AccountQuotaPolicyResourceDescriptionList) (result AccountQuotaPolicyResourceDescriptionList, err error) {
            req, err := lastResults.accountQuotaPolicyResourceDescriptionListPreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "listByAccountNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListByAccountSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "listByAccountNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListByAccountResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "listByAccountNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListByAccountComplete enumerates all values, automatically crossing page boundaries as required.
            func (client AccountQuotaPolicyClient) ListByAccountComplete(ctx context.Context, resourceGroupName string, accountName string) (result AccountQuotaPolicyResourceDescriptionListIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/AccountQuotaPolicyClient.ListByAccount")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.ListByAccount(ctx, resourceGroupName, accountName)
                            return
            }

// Update if an account resource with the same name exists, then it is updated with the specified description and
// properties. Currently the only supported policy name is 'AccountQuotaPolicy'
    // Parameters:
        // resourceGroupName - the name of the resource group within the user's subscription.
        // accountName - the name of the Singularity account.
        // policyName - the name of the Singularity account quota policy. Should only be Default.
        // body - singularity AccountQuotaPolicy information.
func (client AccountQuotaPolicyClient) Update(ctx context.Context, resourceGroupName string, accountName string, policyName string, body AccountQuotaPolicyResourcePatchDescription) (result AccountQuotaPolicyUpdateFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AccountQuotaPolicyClient.Update")
        defer func() {
            sc := -1
        if result.Response() != nil {
        sc = result.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.UpdatePreparer(ctx, resourceGroupName, accountName, policyName, body)
    if err != nil {
    err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "Update", nil , "Failure preparing request")
    return
    }

        result, err = client.UpdateSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "microsoftazuremanagementaisupercomputer.AccountQuotaPolicyClient", "Update", result.Response(), "Failure sending request")
        return
        }

    return
}

    // UpdatePreparer prepares the Update request.
    func (client AccountQuotaPolicyClient) UpdatePreparer(ctx context.Context, resourceGroupName string, accountName string, policyName string, body AccountQuotaPolicyResourcePatchDescription) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "accountName": accountName,
        "policyName": policyName,
        "resourceGroupName": resourceGroupName,
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-12-01-preview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPatch(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/accountQuotaPolicies/{policyName}",pathParameters),
autorest.WithJSON(body),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateSender sends the Update request. The method will close the
    // http.Response Body if it receives an error.
    func (client AccountQuotaPolicyClient) UpdateSender(req *http.Request) (future AccountQuotaPolicyUpdateFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
            if err != nil {
            return
            }
            future.Future, err = azure.NewFutureFromResponse(resp)
            return
            }

    // UpdateResponder handles the response to the Update request. The method always
    // closes the http.Response Body.
    func (client AccountQuotaPolicyClient) UpdateResponder(resp *http.Response) (result AccountQuotaPolicyResourceDescription, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

