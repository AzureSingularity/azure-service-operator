package microsoftazuremanagementaisupercomputer

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

        // AccountStatus enumerates the values for account status.
    type AccountStatus string

    const (
                // Created ...
        Created AccountStatus = "Created"
                // Creating ...
        Creating AccountStatus = "Creating"
                // Deleting ...
        Deleting AccountStatus = "Deleting"
                // Failed ...
        Failed AccountStatus = "Failed"
                // Updating ...
        Updating AccountStatus = "Updating"
            )
    // PossibleAccountStatusValues returns an array of possible values for the AccountStatus const type.
    func PossibleAccountStatusValues() []AccountStatus {
        return []AccountStatus{Created,Creating,Deleting,Failed,Updating}
    }

        // CheckpointRetentionMode enumerates the values for checkpoint retention mode.
    type CheckpointRetentionMode string

    const (
                // MaxStorage ...
        MaxStorage CheckpointRetentionMode = "MaxStorage"
                // TTL ...
        TTL CheckpointRetentionMode = "Ttl"
            )
    // PossibleCheckpointRetentionModeValues returns an array of possible values for the CheckpointRetentionMode const type.
    func PossibleCheckpointRetentionModeValues() []CheckpointRetentionMode {
        return []CheckpointRetentionMode{MaxStorage,TTL}
    }

        // CompilationMode enumerates the values for compilation mode.
    type CompilationMode string

    const (
                // Eager ...
        Eager CompilationMode = "Eager"
                // OptmizedStatic ...
        OptmizedStatic CompilationMode = "OptmizedStatic"
                // Static ...
        Static CompilationMode = "Static"
            )
    // PossibleCompilationModeValues returns an array of possible values for the CompilationMode const type.
    func PossibleCompilationModeValues() []CompilationMode {
        return []CompilationMode{Eager,OptmizedStatic,Static}
    }

        // FrameworkKind enumerates the values for framework kind.
    type FrameworkKind string

    const (
                // PyTorch ...
        PyTorch FrameworkKind = "PyTorch"
                // TensorFlow ...
        TensorFlow FrameworkKind = "TensorFlow"
            )
    // PossibleFrameworkKindValues returns an array of possible values for the FrameworkKind const type.
    func PossibleFrameworkKindValues() []FrameworkKind {
        return []FrameworkKind{PyTorch,TensorFlow}
    }

        // IdleResourcesHandlingMode enumerates the values for idle resources handling mode.
    type IdleResourcesHandlingMode string

    const (
                // AutoDelete ...
        AutoDelete IdleResourcesHandlingMode = "AutoDelete"
                // AutoSuspend ...
        AutoSuspend IdleResourcesHandlingMode = "AutoSuspend"
            )
    // PossibleIdleResourcesHandlingModeValues returns an array of possible values for the IdleResourcesHandlingMode const type.
    func PossibleIdleResourcesHandlingModeValues() []IdleResourcesHandlingMode {
        return []IdleResourcesHandlingMode{AutoDelete,AutoSuspend}
    }

        // JobStatus enumerates the values for job status.
    type JobStatus string

    const (
                // JobStatusApproved ...
        JobStatusApproved JobStatus = "Approved"
                // JobStatusApproving ...
        JobStatusApproving JobStatus = "Approving"
                // JobStatusCompleted ...
        JobStatusCompleted JobStatus = "Completed"
                // JobStatusCreated ...
        JobStatusCreated JobStatus = "Created"
                // JobStatusCreating ...
        JobStatusCreating JobStatus = "Creating"
                // JobStatusDeleting ...
        JobStatusDeleting JobStatus = "Deleting"
                // JobStatusError ...
        JobStatusError JobStatus = "Error"
                // JobStatusFailed ...
        JobStatusFailed JobStatus = "Failed"
                // JobStatusResuming ...
        JobStatusResuming JobStatus = "Resuming"
                // JobStatusRunning ...
        JobStatusRunning JobStatus = "Running"
                // JobStatusStarting ...
        JobStatusStarting JobStatus = "Starting"
                // JobStatusSuspended ...
        JobStatusSuspended JobStatus = "Suspended"
                // JobStatusSuspending ...
        JobStatusSuspending JobStatus = "Suspending"
            )
    // PossibleJobStatusValues returns an array of possible values for the JobStatus const type.
    func PossibleJobStatusValues() []JobStatus {
        return []JobStatus{JobStatusApproved,JobStatusApproving,JobStatusCompleted,JobStatusCreated,JobStatusCreating,JobStatusDeleting,JobStatusError,JobStatusFailed,JobStatusResuming,JobStatusRunning,JobStatusStarting,JobStatusSuspended,JobStatusSuspending}
    }

        // Kind enumerates the values for kind.
    type Kind string

    const (
                // KindAzureAISupercomputerStorage ...
        KindAzureAISupercomputerStorage Kind = "AzureAISupercomputerStorage"
                // KindAzureBlobStorage ...
        KindAzureBlobStorage Kind = "AzureBlobStorage"
                // KindAzureFileStorage ...
        KindAzureFileStorage Kind = "AzureFileStorage"
                // KindStorageSourceBase ...
        KindStorageSourceBase Kind = "StorageSourceBase"
            )
    // PossibleKindValues returns an array of possible values for the Kind const type.
    func PossibleKindValues() []Kind {
        return []Kind{KindAzureAISupercomputerStorage,KindAzureBlobStorage,KindAzureFileStorage,KindStorageSourceBase}
    }

        // KindBasicFrameworkImageBase enumerates the values for kind basic framework image base.
    type KindBasicFrameworkImageBase string

    const (
                // KindFrameworkImageBase ...
        KindFrameworkImageBase KindBasicFrameworkImageBase = "FrameworkImageBase"
                // KindPyTorch ...
        KindPyTorch KindBasicFrameworkImageBase = "PyTorch"
                // KindTensorFlow ...
        KindTensorFlow KindBasicFrameworkImageBase = "TensorFlow"
            )
    // PossibleKindBasicFrameworkImageBaseValues returns an array of possible values for the KindBasicFrameworkImageBase const type.
    func PossibleKindBasicFrameworkImageBaseValues() []KindBasicFrameworkImageBase {
        return []KindBasicFrameworkImageBase{KindFrameworkImageBase,KindPyTorch,KindTensorFlow}
    }

        // ParallelismStrategy enumerates the values for parallelism strategy.
    type ParallelismStrategy string

    const (
                // DistributedDataParallel ...
        DistributedDataParallel ParallelismStrategy = "DistributedDataParallel"
                // ModelParallel ...
        ModelParallel ParallelismStrategy = "ModelParallel"
                // PipelineParallel ...
        PipelineParallel ParallelismStrategy = "PipelineParallel"
                // ZeRODistributedDataParallel ...
        ZeRODistributedDataParallel ParallelismStrategy = "ZeRODistributedDataParallel"
            )
    // PossibleParallelismStrategyValues returns an array of possible values for the ParallelismStrategy const type.
    func PossibleParallelismStrategyValues() []ParallelismStrategy {
        return []ParallelismStrategy{DistributedDataParallel,ModelParallel,PipelineParallel,ZeRODistributedDataParallel}
    }

        // PolicyStatus enumerates the values for policy status.
    type PolicyStatus string

    const (
                // PolicyStatusCreated ...
        PolicyStatusCreated PolicyStatus = "Created"
                // PolicyStatusCreating ...
        PolicyStatusCreating PolicyStatus = "Creating"
                // PolicyStatusDeleting ...
        PolicyStatusDeleting PolicyStatus = "Deleting"
                // PolicyStatusFailed ...
        PolicyStatusFailed PolicyStatus = "Failed"
                // PolicyStatusUpdating ...
        PolicyStatusUpdating PolicyStatus = "Updating"
            )
    // PossiblePolicyStatusValues returns an array of possible values for the PolicyStatus const type.
    func PossiblePolicyStatusValues() []PolicyStatus {
        return []PolicyStatus{PolicyStatusCreated,PolicyStatusCreating,PolicyStatusDeleting,PolicyStatusFailed,PolicyStatusUpdating}
    }

        // ProtocolType enumerates the values for protocol type.
    type ProtocolType string

    const (
                // HTTPS ...
        HTTPS ProtocolType = "Https"
                // SSH ...
        SSH ProtocolType = "Ssh"
                // TCP ...
        TCP ProtocolType = "Tcp"
                // WebSocket ...
        WebSocket ProtocolType = "WebSocket"
            )
    // PossibleProtocolTypeValues returns an array of possible values for the ProtocolType const type.
    func PossibleProtocolTypeValues() []ProtocolType {
        return []ProtocolType{HTTPS,SSH,TCP,WebSocket}
    }

        // ProvisioningState enumerates the values for provisioning state.
    type ProvisioningState string

    const (
                // ProvisioningStateCanceled ...
        ProvisioningStateCanceled ProvisioningState = "Canceled"
                // ProvisioningStateCreating ...
        ProvisioningStateCreating ProvisioningState = "Creating"
                // ProvisioningStateDeleting ...
        ProvisioningStateDeleting ProvisioningState = "Deleting"
                // ProvisioningStateFailed ...
        ProvisioningStateFailed ProvisioningState = "Failed"
                // ProvisioningStateSucceeded ...
        ProvisioningStateSucceeded ProvisioningState = "Succeeded"
                // ProvisioningStateUpdating ...
        ProvisioningStateUpdating ProvisioningState = "Updating"
            )
    // PossibleProvisioningStateValues returns an array of possible values for the ProvisioningState const type.
    func PossibleProvisioningStateValues() []ProvisioningState {
        return []ProvisioningState{ProvisioningStateCanceled,ProvisioningStateCreating,ProvisioningStateDeleting,ProvisioningStateFailed,ProvisioningStateSucceeded,ProvisioningStateUpdating}
    }

        // SchedulingMode enumerates the values for scheduling mode.
    type SchedulingMode string

    const (
                // Default ...
        Default SchedulingMode = "Default"
                // FairShare ...
        FairShare SchedulingMode = "FairShare"
                // FIFO ...
        FIFO SchedulingMode = "FIFO"
                // Priority ...
        Priority SchedulingMode = "Priority"
            )
    // PossibleSchedulingModeValues returns an array of possible values for the SchedulingMode const type.
    func PossibleSchedulingModeValues() []SchedulingMode {
        return []SchedulingMode{Default,FairShare,FIFO,Priority}
    }

        // SchedulingPriority enumerates the values for scheduling priority.
    type SchedulingPriority string

    const (
                // High ...
        High SchedulingPriority = "High"
                // Low ...
        Low SchedulingPriority = "Low"
                // Medium ...
        Medium SchedulingPriority = "Medium"
            )
    // PossibleSchedulingPriorityValues returns an array of possible values for the SchedulingPriority const type.
    func PossibleSchedulingPriorityValues() []SchedulingPriority {
        return []SchedulingPriority{High,Low,Medium}
    }

        // StorageContainerStatus enumerates the values for storage container status.
    type StorageContainerStatus string

    const (
                // StorageContainerStatusCreated ...
        StorageContainerStatusCreated StorageContainerStatus = "Created"
                // StorageContainerStatusCreating ...
        StorageContainerStatusCreating StorageContainerStatus = "Creating"
                // StorageContainerStatusDeleting ...
        StorageContainerStatusDeleting StorageContainerStatus = "Deleting"
                // StorageContainerStatusFailed ...
        StorageContainerStatusFailed StorageContainerStatus = "Failed"
                // StorageContainerStatusResuming ...
        StorageContainerStatusResuming StorageContainerStatus = "Resuming"
                // StorageContainerStatusSuspended ...
        StorageContainerStatusSuspended StorageContainerStatus = "Suspended"
                // StorageContainerStatusSuspending ...
        StorageContainerStatusSuspending StorageContainerStatus = "Suspending"
                // StorageContainerStatusUpdating ...
        StorageContainerStatusUpdating StorageContainerStatus = "Updating"
            )
    // PossibleStorageContainerStatusValues returns an array of possible values for the StorageContainerStatus const type.
    func PossibleStorageContainerStatusValues() []StorageContainerStatus {
        return []StorageContainerStatus{StorageContainerStatusCreated,StorageContainerStatusCreating,StorageContainerStatusDeleting,StorageContainerStatusFailed,StorageContainerStatusResuming,StorageContainerStatusSuspended,StorageContainerStatusSuspending,StorageContainerStatusUpdating}
    }

        // StorageContainerTier enumerates the values for storage container tier.
    type StorageContainerTier string

    const (
                // Cold ...
        Cold StorageContainerTier = "Cold"
                // Hot ...
        Hot StorageContainerTier = "Hot"
                // Warm ...
        Warm StorageContainerTier = "Warm"
            )
    // PossibleStorageContainerTierValues returns an array of possible values for the StorageContainerTier const type.
    func PossibleStorageContainerTierValues() []StorageContainerTier {
        return []StorageContainerTier{Cold,Hot,Warm}
    }

        // StorageSourceKind enumerates the values for storage source kind.
    type StorageSourceKind string

    const (
                // AzureAISupercomputerStorage ...
        AzureAISupercomputerStorage StorageSourceKind = "AzureAISupercomputerStorage"
                // AzureBlobStorage ...
        AzureBlobStorage StorageSourceKind = "AzureBlobStorage"
                // AzureFileStorage ...
        AzureFileStorage StorageSourceKind = "AzureFileStorage"
            )
    // PossibleStorageSourceKindValues returns an array of possible values for the StorageSourceKind const type.
    func PossibleStorageSourceKindValues() []StorageSourceKind {
        return []StorageSourceKind{AzureAISupercomputerStorage,AzureBlobStorage,AzureFileStorage}
    }

